window.addEventListener('load', e => {

	const _ = new InactJS()

	_.h1('What is InactJS?')
		.addEventListener('click', e =>{
			console.log('clicked it')
	})
	_.h2('...explain it to me like I\'m 12 years old.')

	_.div()
		_.h3('A micro-library')
		_.p(`
			InactJS is a micro-library that builds dynamic HTML. It can be
			run right from your file system. Just reference it in your HTML
			file ahead of your own Javascript files. Since your own Javascript
			doesn't have to import this library, you won't encounter any
			Cross-Origin Resource Sharing (CORS) restrictions when running it
			directly from your file system.
		`)
		_.p(`
			If you look at the index.html file, you'll notice that there's nothing
			inside the body tags. That's because all of the content you see on the
			page is generated by InactJS. InactJS is inserting "child elements"
			inside the body tag.
		`)
		_.h3("It's for prototypes...")
		_.p(`The idea behind InactJS is that it's a handy tool for building simple
			HTML prototypes. Most web applications will need far more support than this
			library is designed to offer, like state management, etc. But because
			you don't need to run this library from a server, it's handier than
			prototyping in straight HTML. Because the library is a simple, easy-to-follow
			one-page javscript file, it's easy to edit to adapt to your own needs`)
		_.h3('Examples Usage...')
		_.p(`
			See the examples below that demonstrate how to add content using the
			InactJS script:
		`)
		const divForLater = _.div() // capture this div to later add more children to it
			_.p(`
				You can add attributes, like "class", "name", "id", etc. Just supply
				an array of key/value pair objects.
			`, {attributes:[{class:"bluetext"}]})
		_._()
	_._()
	_.div()
		_.form({attributes:[{method:"GET",action:"#"}]})
			_.div()
				_.label('First Name',{attributes:[{for:'firstName'}]})
				_.input({attributes:[{id:'firstName',name:'firstName',placeholder:'First Name'}]})
			_._()
			_.input({attributes:[{type:'submit',value:'Submit'}]})
		_._()
	_._()
	_.ul()
		_.li('first list item')
		_.li('second list item')
	_._()

	_.table()
		const tableData =[
			['auto-col 1', 'auto-col 2', 'auto-col 3'],
			['auto 1','auto 12','auto 123'],
			['auto 2','auto 22','auto 223'],
			['auto 3','auto 32','auto 323'],
			['sum=6','sum=66','sum=669']
		]
		_.thead({headings:tableData.slice(0,1)})
		_.tbody({data:tableData.slice(1,-1)})
		_.tfoot({footer:tableData.slice(-1)})
	_._()

	_.table()
		_.thead()	
			_.tr()
				_.th('col 1'); _.th('col 2'); _.th('col 3')
			_._()
		_._()
		_.tbody()	
			_.tr()
				_.td('1'); _.td('12'); _.td('123')
			_._()
			_.tr()
				_.td('2'); _.td('22'); _.td('223')
			_._()
			_.tr()
				_.td('3'); _.td('32'); _.td('323')
			_._()
		_._()
	_._()

	_.p(`
		Note that you can also add elements out of order by specifying the
		container it should go in... like this paragraph which is added at
		the tail-end of the script`,
		{parent:divForLater})
})
